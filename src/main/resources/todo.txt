- to save space, remove (instead of just marking as deleted) deleted values during major compaction
- bloom filters
- add pools for getting tables
- figure out concurrency and thread safety!
--> compaction should occur automatically and should run on a background thread
- decide whether we want non-flushed writes to be readable after shutdown. if yes:
--> log everything before writing it to memory (this can't be the actual data file because it won't be ordered)
--> clear log after flush to disk
--> shutdown/close should flush memstore
--> implement recovery using logs (i.e. on restart, if we have a log that hasn't been properly flushed yet, flush it to disk)
- add compression
- add backwards scan

 sources:
 https://www.igvita.com/2012/02/06/sstable-and-log-structured-storage-leveldb/

 Notes on compaction approach:
        let's have two levels, L0 and L1.
             for a minor compaction, we'll just merge-sort L0. this leaves us with potentially overlapping files wrt L1, but we don't have to rewrite the whole db
             for a major compaction, first merge-sort L0 and then we merge-sort the whole db.
